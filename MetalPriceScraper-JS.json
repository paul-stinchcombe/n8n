{"createdAt":"2025-08-26T06:24:30.747Z","updatedAt":"2025-08-26T08:21:12.000Z","id":"DdUl0Ld5eYpnIG2x","name":"MetalPriceScraper JS","active":true,"isArchived":false,"nodes":[{"parameters":{"rule":{"interval":[{"field":"hours","hoursInterval":2}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-720,-128],"id":"503a4ce7-6ce4-4377-878b-615a9c40c387","name":"Schedule Trigger"},{"parameters":{"operation":"extractHtmlContent","extractionValues":{"values":[{"key":"price","cssSelector":".item___ku9Fy","returnValue":"html","returnArray":true}]},"options":{"trimValues":true,"cleanUpText":true}},"type":"n8n-nodes-base.html","typeVersion":1.2,"position":[-272,-128],"id":"4f8a8d82-ede3-4dfa-ab64-a7b000cd1098","name":"HTML"},{"parameters":{"url":"https://www.metal.com/price/SHFE/SHFE","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-496,-128],"id":"3f1f71aa-204d-410f-b403-94df98513b11","name":"HTTP Request1"},{"parameters":{"operation":"upsert","schema":{"__rl":true,"value":"public","mode":"list","cachedResultName":"public"},"table":{"__rl":true,"value":"prices","mode":"list","cachedResultName":"prices"},"columns":{"mappingMode":"defineBelow","value":{"code":"={{ $json.code }}","description":"={{ $json.description }}","price":"={{ $json.price }}","diff":"={{ $json.change }}","updated_at":"={{ Date.now() }}"},"matchingColumns":["code"],"schema":[{"id":"code","displayName":"code","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"description","displayName":"description","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"price","displayName":"price","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"diff","displayName":"diff","required":true,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":false},{"id":"updated_at","displayName":"updated_at","required":true,"defaultMatch":false,"display":true,"type":"number","canBeUsedToMatch":false}],"attemptToConvertTypes":false,"convertFieldsToString":false},"options":{}},"type":"n8n-nodes-base.postgres","typeVersion":2.6,"position":[400,-128],"id":"668acb4a-598a-4a04-8daa-73f3c177a830","name":"Insert or update rows in a table","credentials":{"postgres":{"id":"aLaUGnmq3nf7pLeY","name":"LME"}}},{"parameters":{"fieldToSplitOut":"prices","options":{}},"type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[176,-128],"id":"8a9cfccb-4724-4948-8a2f-c10b9e2b8630","name":"Split Out"},{"parameters":{"jsCode":"\n// Function to check if a string contains HTML tags\nfunction containsHTML(str) {\n   return /<[^>]*>/.test(str);\n}\n\n// Function to clean HTML from a string\nfunction cleanHTML(str) {\n   return str.replace(/<[^>]*>/g, \"\").trim();\n}\n\n// Function to check if a string looks like a contract name\nfunction isContractName(str) {\n   return /^[A-Za-z]+\\d+\\s*\\([^)]+\\)$/.test(str);\n}\n\n// Function to check if a string looks like a price/volume/change value\nfunction isPriceValue(str) {\n   // Remove commas and check if it's a number or percentage\n   const cleanStr = str.replace(/,/g, \"\");\n   return (\n      /^[+-]?\\d+(\\.\\d+)?%?$/.test(cleanStr) ||\n      /^[+-]?\\d+(\\.\\d+)?$/.test(cleanStr) ||\n      /^[A-Za-z]+\\d+\\s*\\([^)]+\\)$/.test(str)\n   ); // Contract names like \"Al2509 (CNY/mt)\"\n}\n\n// Function to process the prices data into structured objects\nfunction processPrices() {\n   try {\n      // Read the input file\n      const data = $input.all();\n\n      if (!data || !Array.isArray(data) || data.length === 0 || !data[0].json.price) {\n         throw new Error(\"Invalid data structure. Expected array with price property.\");\n      }\n\n      const rawPrices = data[0].json.price;\n      const cleanedPrices = [];\n      const structuredPrices = [];\n\n      // First pass: clean all HTML and filter meaningful data\n      for (let i = 0; i < rawPrices.length; i++) {\n         const item = rawPrices[i];\n\n         if (typeof item === \"string\") {\n            let cleaned = item;\n            if (containsHTML(item)) {\n               cleaned = cleanHTML(item);\n            }\n\n            if (cleaned && cleaned.trim().length > 0) {\n               cleanedPrices.push(cleaned.trim());\n            }\n         }\n      }\n\n      // Second pass: organize into structured format\n      let currentContract = null;\n      let currentPrices = {price:'', open: '', high: '', low: '', volume: '', change: ''};\n\n      for (let i = 0; i < cleanedPrices.length; i++) {\n         const item = cleanedPrices[i];\n\n         if (isContractName(item)) {\n            // Save previous contract data if exists\n            if (currentContract && Object.keys(currentPrices).length > 0) {\n               structuredPrices.push({\n                  code: currentContract,\n                  ...currentPrices,\n               });\n            }\n\n            // Start new contract\n            currentContract = item.substr(0,2);\n            currentPrices = {price:'', open: '', high: '', low: '', volume: '', change: ''};\n         } else if (isPriceValue(item)) {\n            // This is a price value, need to determine what type\n            // We'll need to look at the context or position\n            if (!currentPrices.price) {\n               currentPrices.price = item;\n            } else if (!currentPrices.open) {\n               currentPrices.open = item;\n            } else if (!currentPrices.high) {\n               currentPrices.high = item;\n            } else if (!currentPrices.low) {\n               currentPrices.low = item;\n            } else if (!currentPrices.volume) {\n               currentPrices.volume = item;\n            } else if (!currentPrices.change) {\n               currentPrices.change = item;\n            }\n         }\n      }\n\n      // Don't forget the last contract\n      if (currentContract && Object.keys(currentPrices).length > 0) {\n         structuredPrices.push({\n            code: (currentContract.substr(0, 2)),\n            ...currentPrices,\n         });\n      }\n\n      // Return the cleaned data\n      return {prices: structuredPrices.slice(0, 7)};\n\n   } catch (error) {\n      return {};\n   }\n}\n\nreturn processPrices();\n\n\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[-48,-128],"id":"1be68563-7e5d-4c9a-8c2a-86423edc446b","name":"Code"}],"connections":{"Schedule Trigger":{"main":[[{"node":"HTTP Request1","type":"main","index":0}]]},"HTML":{"main":[[{"node":"Code","type":"main","index":0}]]},"HTTP Request1":{"main":[[{"node":"HTML","type":"main","index":0}]]},"Insert or update rows in a table":{"main":[[]]},"Split Out":{"main":[[{"node":"Insert or update rows in a table","type":"main","index":0}]]},"Code":{"main":[[{"node":"Split Out","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[22]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"2d9c9e77-efe4-4b20-bc21-1550ea78f01e","triggerCount":1,"shared":[{"createdAt":"2025-08-26T06:24:30.750Z","updatedAt":"2025-08-26T06:24:30.750Z","role":"workflow:owner","workflowId":"DdUl0Ld5eYpnIG2x","projectId":"FvxAVPRgShLcnSOU"}],"tags":[{"createdAt":"2025-08-26T08:20:54.298Z","updatedAt":"2025-08-26T08:20:54.298Z","id":"LcSyAeaRNr0HnLus","name":"LME"}]}